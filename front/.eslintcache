[{"/home/julian/web_projects/react-sidebar-dropdown/front/src/index.js":"1","/home/julian/web_projects/react-sidebar-dropdown/front/src/App.js":"2","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/Sidebar.js":"3","/home/julian/web_projects/react-sidebar-dropdown/front/src/pages/Overview.js":"4","/home/julian/web_projects/react-sidebar-dropdown/front/src/pages/Reports.js":"5","/home/julian/web_projects/react-sidebar-dropdown/front/src/pages/Team.js":"6","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/SidebarData.js":"7","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/SubMenu.js":"8","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/fileupload/FileUpload.js":"9","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/fileupload/fileUploadStyles.js":"10","/home/julian/web_projects/react-sidebar-dropdown/front/src/hooks/usePrevious.js":"11","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/chartbasic/chartbasic.js":"12","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/scatterbasic/scatter.js":"13","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/heatmapbasic/heatmapchart.js":"14","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/heatmapMio/mainHeat.js":"15","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/filter/filter.js":"16","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/smallSquareCo/smallSquareCo.js":"17","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/filterDod/filterDos.js":"18","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/filterDod/button.js":"19","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/cardInter/cardIntersection.js":"20","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/upset/upset.js":"21","/home/julian/web_projects/react-sidebar-dropdown/front/src/forstudy/tres.js":"22","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/network/network.js":"23","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/citoNetw/citoNet.js":"24","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/citoNetw/cytoscape.js":"25","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/citoNetwDos/citoNetD.js":"26","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/tresDGraph/TresDGraph.js":"27","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/tresDGraph/TresDGraphFoc.js":"28","/home/julian/web_projects/react-sidebar-dropdown/front/src/utils/canvasSave.js":"29","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/tresDGraph/FourDGraphFoc.js":"30","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/colorGroup/colorGroup.js":"31","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/searchBar/searchBar.js":"32","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/results/results.js":"33","/home/julian/web_projects/araneta/front/src/index.js":"34","/home/julian/web_projects/araneta/front/src/App.js":"35","/home/julian/web_projects/araneta/front/src/components/Sidebar.js":"36","/home/julian/web_projects/araneta/front/src/pages/Overview.js":"37","/home/julian/web_projects/araneta/front/src/pages/Team.js":"38","/home/julian/web_projects/araneta/front/src/pages/Reports.js":"39","/home/julian/web_projects/araneta/front/src/components/SidebarData.js":"40","/home/julian/web_projects/araneta/front/src/components/SubMenu.js":"41","/home/julian/web_projects/araneta/front/src/components/chartbasic/chartbasic.js":"42","/home/julian/web_projects/araneta/front/src/components/fileupload/FileUpload.js":"43","/home/julian/web_projects/araneta/front/src/components/scatterbasic/scatter.js":"44","/home/julian/web_projects/araneta/front/src/components/heatmapMio/mainHeat.js":"45","/home/julian/web_projects/araneta/front/src/components/filterDod/filterDos.js":"46","/home/julian/web_projects/araneta/front/src/forstudy/tres.js":"47","/home/julian/web_projects/araneta/front/src/components/cardInter/cardIntersection.js":"48","/home/julian/web_projects/araneta/front/src/components/fileupload/fileUploadStyles.js":"49","/home/julian/web_projects/araneta/front/src/components/filterDod/button.js":"50","/home/julian/web_projects/araneta/front/src/components/smallSquareCo/smallSquareCo.js":"51","/home/julian/web_projects/araneta/front/src/components/upset/upset.js":"52","/home/julian/web_projects/araneta/front/src/components/tresDGraph/TresDGraph.js":"53","/home/julian/web_projects/araneta/front/src/components/tresDGraph/FourDGraphFoc.js":"54","/home/julian/web_projects/araneta/front/src/components/tresDGraph/TresDGraphFoc.js":"55","/home/julian/web_projects/araneta/front/src/utils/canvasSave.js":"56","/home/julian/web_projects/araneta/front/src/components/colorGroup/colorGroup.js":"57","/home/julian/web_projects/araneta/front/src/components/searchBar/searchBar.js":"58","/home/julian/web_projects/araneta/front/src/components/results/results.js":"59","/home/julian/web_projects/araneta/front/src/components/colorButton/colorButton.js":"60","/home/julian/web_projects/araneta/front/src/components/newTableJul/rowTable.js":"61","/home/julian/web_projects/araneta/front/src/components/tablaJulComp/componentTableDos.js":"62","/home/julian/web_projects/araneta/front/src/components/newTableJul/rowCols.js":"63","/home/julian/web_projects/araneta/front/src/components/listUploadComponent/listUploadComp.js":"64","/home/julian/web_projects/araneta/front/src/components/fileupload/FileUploadNum.js":"65","/home/julian/web_projects/araneta/front/src/components/corrNodesBu/corrNodesBu.js":"66"},{"size":175,"mtime":1633231053952,"results":"67","hashOfConfig":"68"},{"size":5003,"mtime":1636962638575,"results":"69","hashOfConfig":"68"},{"size":3286,"mtime":1630400265765,"results":"70","hashOfConfig":"68"},{"size":2980,"mtime":1634696759873,"results":"71","hashOfConfig":"68"},{"size":27359,"mtime":1636964223808,"results":"72","hashOfConfig":"68"},{"size":148,"mtime":1630356709037,"results":"73","hashOfConfig":"68"},{"size":1957,"mtime":1630388680756,"results":"74","hashOfConfig":"68"},{"size":1591,"mtime":1630356709037,"results":"75","hashOfConfig":"68"},{"size":6795,"mtime":1630978048631,"results":"76","hashOfConfig":"68"},{"size":4064,"mtime":1630599665929,"results":"77","hashOfConfig":"68"},{"size":498,"mtime":1630805008909,"results":"78","hashOfConfig":"68"},{"size":1300,"mtime":1631075409115,"results":"79","hashOfConfig":"68"},{"size":1301,"mtime":1631148179747,"results":"80","hashOfConfig":"68"},{"size":2367,"mtime":1631358730766,"results":"81","hashOfConfig":"68"},{"size":7243,"mtime":1636954972549,"results":"82","hashOfConfig":"68"},{"size":2598,"mtime":1632284236984,"results":"83","hashOfConfig":"68"},{"size":2001,"mtime":1631848734137,"results":"84","hashOfConfig":"68"},{"size":3495,"mtime":1632368318803,"results":"85","hashOfConfig":"68"},{"size":788,"mtime":1632344513887,"results":"86","hashOfConfig":"68"},{"size":614,"mtime":1632422472171,"results":"87","hashOfConfig":"68"},{"size":698,"mtime":1632546312950,"results":"88","hashOfConfig":"68"},{"size":14093,"mtime":1636666972870,"results":"89","hashOfConfig":"68"},{"size":1378,"mtime":1633292452337,"results":"90","hashOfConfig":"68"},{"size":578,"mtime":1633302901496,"results":"91","hashOfConfig":"68"},{"size":200,"mtime":1633302887852,"results":"92","hashOfConfig":"68"},{"size":6056,"mtime":1635021492359,"results":"93","hashOfConfig":"68"},{"size":792,"mtime":1636227265311,"results":"94","hashOfConfig":"68"},{"size":4235,"mtime":1636010140713,"results":"95","hashOfConfig":"68"},{"size":9607,"mtime":1634986588012,"results":"96","hashOfConfig":"68"},{"size":25360,"mtime":1636924063389,"results":"97","hashOfConfig":"68"},{"size":595,"mtime":1636343254037,"results":"98","hashOfConfig":"68"},{"size":389,"mtime":1636252831257,"results":"99","hashOfConfig":"68"},{"size":3647,"mtime":1636926030851,"results":"100","hashOfConfig":"68"},{"size":175,"mtime":1633231053952,"results":"101","hashOfConfig":"102"},{"size":5489,"mtime":1640120964480,"results":"103","hashOfConfig":"102"},{"size":3286,"mtime":1630400265765,"results":"104","hashOfConfig":"102"},{"size":2980,"mtime":1634696759873,"results":"105","hashOfConfig":"102"},{"size":148,"mtime":1630356709037,"results":"106","hashOfConfig":"102"},{"size":28094,"mtime":1640120964700,"results":"107","hashOfConfig":"102"},{"size":1971,"mtime":1637223941717,"results":"108","hashOfConfig":"102"},{"size":1591,"mtime":1630356709037,"results":"109","hashOfConfig":"102"},{"size":1300,"mtime":1631075409115,"results":"110","hashOfConfig":"102"},{"size":6795,"mtime":1630978048631,"results":"111","hashOfConfig":"102"},{"size":1301,"mtime":1631148179747,"results":"112","hashOfConfig":"102"},{"size":8004,"mtime":1640061463323,"results":"113","hashOfConfig":"102"},{"size":3743,"mtime":1640059101590,"results":"114","hashOfConfig":"102"},{"size":17474,"mtime":1640120964696,"results":"115","hashOfConfig":"102"},{"size":614,"mtime":1632422472171,"results":"116","hashOfConfig":"102"},{"size":4064,"mtime":1630599665929,"results":"117","hashOfConfig":"102"},{"size":911,"mtime":1636997424834,"results":"118","hashOfConfig":"102"},{"size":2001,"mtime":1637281954713,"results":"119","hashOfConfig":"102"},{"size":698,"mtime":1632546312950,"results":"120","hashOfConfig":"102"},{"size":792,"mtime":1636227265311,"results":"121","hashOfConfig":"102"},{"size":28967,"mtime":1640058882498,"results":"122","hashOfConfig":"102"},{"size":4264,"mtime":1640058882498,"results":"123","hashOfConfig":"102"},{"size":9607,"mtime":1634986588012,"results":"124","hashOfConfig":"102"},{"size":595,"mtime":1636343254037,"results":"125","hashOfConfig":"102"},{"size":389,"mtime":1636252831257,"results":"126","hashOfConfig":"102"},{"size":4127,"mtime":1640052989840,"results":"127","hashOfConfig":"102"},{"size":929,"mtime":1636574362793,"results":"128","hashOfConfig":"102"},{"size":837,"mtime":1636735601131,"results":"129","hashOfConfig":"102"},{"size":3064,"mtime":1640060196043,"results":"130","hashOfConfig":"102"},{"size":393,"mtime":1636740171608,"results":"131","hashOfConfig":"102"},{"size":6611,"mtime":1640120965600,"results":"132","hashOfConfig":"102"},{"size":6863,"mtime":1637741057275,"results":"133","hashOfConfig":"102"},{"size":648,"mtime":1638008816368,"results":"134","hashOfConfig":"102"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},"1ylpe0n",{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"191"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"137"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"137"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"137"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"137"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15qeeoi",{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"248"},"/home/julian/web_projects/react-sidebar-dropdown/front/src/index.js",[],["278","279"],"/home/julian/web_projects/react-sidebar-dropdown/front/src/App.js",["280"],"/home/julian/web_projects/react-sidebar-dropdown/front/src/components/Sidebar.js",[],"/home/julian/web_projects/react-sidebar-dropdown/front/src/pages/Overview.js",[],"/home/julian/web_projects/react-sidebar-dropdown/front/src/pages/Reports.js",[],"/home/julian/web_projects/react-sidebar-dropdown/front/src/pages/Team.js",[],"/home/julian/web_projects/react-sidebar-dropdown/front/src/components/SidebarData.js",[],"/home/julian/web_projects/react-sidebar-dropdown/front/src/components/SubMenu.js",[],"/home/julian/web_projects/react-sidebar-dropdown/front/src/components/fileupload/FileUpload.js",[],"/home/julian/web_projects/react-sidebar-dropdown/front/src/components/fileupload/fileUploadStyles.js",[],"/home/julian/web_projects/react-sidebar-dropdown/front/src/hooks/usePrevious.js",[],"/home/julian/web_projects/react-sidebar-dropdown/front/src/components/chartbasic/chartbasic.js",[],"/home/julian/web_projects/react-sidebar-dropdown/front/src/components/scatterbasic/scatter.js",[],"/home/julian/web_projects/react-sidebar-dropdown/front/src/components/heatmapbasic/heatmapchart.js",[],["281","282"],"/home/julian/web_projects/react-sidebar-dropdown/front/src/components/heatmapMio/mainHeat.js",[],"/home/julian/web_projects/react-sidebar-dropdown/front/src/components/filter/filter.js",["283","284"],"/home/julian/web_projects/react-sidebar-dropdown/front/src/components/smallSquareCo/smallSquareCo.js",[],"/home/julian/web_projects/react-sidebar-dropdown/front/src/components/filterDod/filterDos.js",[],"/home/julian/web_projects/react-sidebar-dropdown/front/src/components/filterDod/button.js",[],"/home/julian/web_projects/react-sidebar-dropdown/front/src/components/cardInter/cardIntersection.js",[],"/home/julian/web_projects/react-sidebar-dropdown/front/src/components/upset/upset.js",[],"/home/julian/web_projects/react-sidebar-dropdown/front/src/forstudy/tres.js",[],"/home/julian/web_projects/react-sidebar-dropdown/front/src/components/network/network.js",[],["285","286"],"/home/julian/web_projects/react-sidebar-dropdown/front/src/components/citoNetw/citoNet.js",[],"/home/julian/web_projects/react-sidebar-dropdown/front/src/components/citoNetw/cytoscape.js",[],"/home/julian/web_projects/react-sidebar-dropdown/front/src/components/citoNetwDos/citoNetD.js",["287","288","289"],"import React, { useState, useContext, useEffect } from \"react\";\nimport CytoscapeComponent from \"react-cytoscapejs\";\nimport { NameContext } from \"../../App\";\nimport fcose from \"cytoscape-fcose\";\n//import COSEBilkent from \"cytoscape-cose-bilkent\";\nimport Cytoscape from \"cytoscape\";\n//Cytoscape.use(COSEBilkent);\nCytoscape.use(fcose);\nexport default function NApp() {\n  const {\n    //initial,\n\n    forNetworkFiltered,\n  } = useContext(NameContext);\n\n  console.log(forNetworkFiltered, \"forNetworkFilteredforNetworkFiltered\");\n  const [width, setWith] = useState(\"100%\");\n  const [height, setHeight] = useState(\"100vh\");\n\n  /*  const [graphData, setGraphData] = useState({\n    nodes: [\n      { data: { id: \"1\", label: \"IP 1\", type: \"ip\" } },\n      { data: { id: \"2\", label: \"Device 1\", type: \"device\" } },\n      { data: { id: \"3\", label: \"IP 2\", type: \"ip\" } },\n      { data: { id: \"4\", label: \"Device 2\", type: \"device\" } },\n      { data: { id: \"5\", label: \"Device 3\", type: \"device\" } },\n      { data: { id: \"6\", label: \"IP 3\", type: \"ip\" } },\n      { data: { id: \"7\", label: \"Device 5\", type: \"device\" } },\n      { data: { id: \"8\", label: \"Device 6\", type: \"device\" } },\n      { data: { id: \"9\", label: \"Device 7\", type: \"device\" } },\n      { data: { id: \"10\", label: \"Device 8\", type: \"device\" } },\n      { data: { id: \"11\", label: \"Device 9\", type: \"device\" } },\n      { data: { id: \"12\", label: \"IP 3\", type: \"ip\" } },\n      { data: { id: \"13\", label: \"Device 10\", type: \"device\" } },\n    ],\n    edges: [\n      {\n        data: { source: \"1\", target: \"2\", label: \"Node2\" },\n      },\n      {\n        data: { source: \"3\", target: \"4\", label: \"Node4\" },\n      },\n      {\n        data: { source: \"3\", target: \"5\", label: \"Node5\" },\n      },\n      {\n        data: { source: \"6\", target: \"5\", label: \" 6 -> 5\" },\n      },\n      {\n        data: { source: \"6\", target: \"7\", label: \" 6 -> 7\" },\n      },\n      {\n        data: { source: \"6\", target: \"8\", label: \" 6 -> 8\" },\n      },\n      {\n        data: { source: \"6\", target: \"9\", label: \" 6 -> 9\" },\n      },\n      {\n        data: { source: \"3\", target: \"13\", label: \" 3 -> 13\" },\n      },\n    ],\n  }); */\n\n  const [graphData, setGraphData] = useState({});\n  // const [layout, setLayout] = useState([]);\n\n  useEffect(() => {\n    setGraphData(forNetworkFiltered);\n\n    //setLayout(layout);\n  }, [forNetworkFiltered]);\n\n  const layout = {\n    name: \"cose-bilkent\",\n    directed: false,\n    avoidOverlap: true,\n    spacingFactor: 2.5,\n  };\n\n  const layoutD = {\n    animate: false,\n    animationDuration: undefined,\n    animationEasing: undefined,\n    boundingBox: undefined,\n    componentSpacing: 40,\n    coolingFactor: 0.99,\n    fit: true,\n    gravity: 1,\n    initialTemp: 1000,\n    minTemp: 1.0,\n    name: \"fcose\",\n    nestingFactor: 1.2,\n    nodeDimensionsIncludeLabels: false,\n    nodeOverlap: 4,\n    numIter: 1000,\n    padding: 30,\n\n    /*  nodeRepulsion: (node) => 4500,\n    // Ideal edge (non nested) length\n    idealEdgeLength: (edge) => 50,\n    // Divisor to compute edge forces\n    edgeElasticity: (edge) => 0.45, */\n\n    position(node) {\n      return { row: node.data(\"row\"), col: node.data(\"col\") };\n    },\n    randomize: true,\n    refresh: 20,\n  };\n\n  /*   const layout = {\n    name: \"breadthfirst\",\n    fit: true,\n    // circle: true,\n    directed: false,\n    padding: 50,\n    // spacingFactor: 1.5,\n    animate: true,\n    animationDuration: 1000,\n    avoidOverlap: true,\n    nodeDimensionsIncludeLabels: false,\n  }; */\n\n  const styleSheet = [\n    {\n      selector: \"node\",\n      style: {\n        backgroundColor: \"#4a56a6\",\n        width: 30,\n        height: 30,\n        label: \"data(label)\",\n\n        // \"width\": \"mapData(score, 0, 0.006769776522008331, 20, 60)\",\n        // \"height\": \"mapData(score, 0, 0.006769776522008331, 20, 60)\",\n        // \"text-valign\": \"center\",\n        // \"text-halign\": \"center\",\n        \"overlay-padding\": \"6px\",\n        \"z-index\": \"10\",\n        //text props\n        \"text-outline-color\": \"#4a56a6\",\n        \"text-outline-width\": \"2px\",\n        color: \"white\",\n        fontSize: 20,\n      },\n    },\n    {\n      selector: \"node:selected\",\n      style: {\n        \"border-width\": \"6px\",\n        \"border-color\": \"#AAD8FF\",\n        \"border-opacity\": \"0.5\",\n        \"background-color\": \"#77828C\",\n        width: 50,\n        height: 50,\n        //text props\n        \"text-outline-color\": \"#77828C\",\n        \"text-outline-width\": 8,\n      },\n    },\n    {\n      selector: \"node[type='device']\",\n      style: {\n        shape: \"rectangle\",\n      },\n    },\n    {\n      selector: \"edge\",\n      style: {\n        width: 3,\n        // \"line-color\": \"#6774cb\",\n        \"line-color\": \"#AAD8FF\",\n        //\"target-arrow-color\": \"#6774cb\",\n        /* \"target-arrow-shape\": \"triangle\",\n        \"curve-style\": \"bezier\", */\n      },\n    },\n  ];\n\n  let myCyRef;\n\n  return (\n    <>\n      {Object.keys(forNetworkFiltered).length > 0 ? (\n        <div>\n          <h1>Cytoscape exampleAqui</h1>\n          <div\n            style={{\n              border: \"1px solid\",\n              backgroundColor: \"#f5f6fe\",\n            }}\n          >\n            <CytoscapeComponent\n              elements={CytoscapeComponent.normalizeElements(graphData)}\n              // pan={{ x: 200, y: 200 }}\n              style={{ width: width, height: height }}\n              zoomingEnabled={true}\n              maxZoom={3}\n              minZoom={0.1}\n              autounselectify={false}\n              boxSelectionEnabled={true}\n              layout={layoutD}\n              stylesheet={styleSheet}\n              cy={(cy) => {\n                myCyRef = cy;\n\n                console.log(\"EVT\", cy);\n\n                cy.on(\"add\", \"tap\", \"node\", (evt) => {\n                  var node = evt.target;\n\n                  console.log(\"EVT\", evt);\n                  console.log(\"TARGET\", node.data());\n                  console.log(\"TARGET TYPE\", typeof node[0]);\n                });\n              }}\n              abc={console.log(\"myCyRef\", myCyRef)}\n            />\n          </div>\n        </div>\n      ) : null}\n    </>\n  );\n}\n",["290","291"],"/home/julian/web_projects/react-sidebar-dropdown/front/src/components/tresDGraph/TresDGraph.js",["292"],"import React from \"react\";\nimport { FocusGraphDos } from \"./FourDGraphFoc\";\n/* import {\n  ForceGraph2D,\n  ForceGraph3D,\n  ForceGraphVR,\n  ForceGraphAR,\n} from \"react-force-graph\"; */\nimport { FocusGraph } from \"./TresDGraphFoc\";\n/*  */\nconst TresDGraph = () => {\n  /*   function genRandomTree(N = 300) {\n    return {\n      nodes: [...Array(N).keys()].map((i) => ({ id: i })),\n      links: [...Array(N).keys()]\n        .filter((id) => id)\n        .map((id) => ({\n          source: id,\n          target: Math.round(Math.random() * (id - 1)),\n        })),\n    };\n  } */\n  return (\n    <>\n      {/* <ForceGraph3D graphData={myData} /> */}\n      {/* <ForceGraph3D graphData={genRandomTree()} /> */}\n      {/* <FocusGraph /> */}\n\n      <FocusGraphDos />\n    </>\n  );\n};\n\nexport default TresDGraph;\n","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/tresDGraph/TresDGraphFoc.js",["293","294"],"import React, {\n  useRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport * as THREE from \"three\";\n//import domtoimage from \"dom-to-image\";\nimport Canvas2Image from \"../../utils/canvasSave\";\nimport SpriteText from \"three-spritetext\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport { NameContext } from \"../../App\";\n\n/* \nconst myData = {\n  nodes: [\n    {\n      id: \"id1\",\n      name: \"name1\",\n      color: \"green\",\n      val: 1,\n    },\n    {\n      id: \"id2\",\n      name: \"name2\",\n      color: \"blue\",\n      val: 10,\n    },\n  ],\n  links: [\n    {\n      source: \"id1\",\n      target: \"id2\",\n    },\n  ],\n}; */\n\nexport const FocusGraph = () => {\n  const { forNetworkFiltered } = useContext(NameContext);\n  console.log(forNetworkFiltered, \"forNetworkFilteredforNetworkFiltered\");\n  const [graphData, setGraphData] = useState({});\n  console.log(graphData, \"graphDataLoqueentraAlaGrafica\");\n  // const [layout, setLayout] = useState([]);\n  const [width, height] = useWindowSize();\n  useEffect(() => {\n    /*     forNetworkFiltered.links = forNetworkFiltered.edges; // on object create new key name. Assign old value to this\n    delete forNetworkFiltered.edges; */\n\n    if (forNetworkFiltered.nodes !== undefined) {\n      let nodes = forNetworkFiltered.nodes.map((elem) => {\n        return {\n          id: elem.data.id,\n          name: elem.data.label,\n          type: elem.data.type,\n          color: \"green\",\n        };\n      });\n\n      let links = forNetworkFiltered.edges.map((elem) => {\n        return elem.data;\n      });\n\n      var data4Graph = {\n        nodes: [],\n        links: [],\n      };\n\n      data4Graph.nodes.push(...nodes);\n      data4Graph.links.push(...links);\n      setGraphData(data4Graph);\n      console.log(data4Graph, \"data4GraphAqui\");\n    }\n\n    //setLayout(layout);\n  }, [forNetworkFiltered]);\n\n  console.log(graphData, \"forNetworkFilteredThree\");\n\n  const fgRef = useRef();\n\n  const handleClick = useCallback(\n    (node) => {\n      // Aim at node from outside it\n      const distance = 40;\n      const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n\n      fgRef.current.cameraPosition(\n        { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }, // new position\n        node, // lookAt ({ x, y, z })\n        3000 // ms transition duration\n      );\n      console.log(\"object cliqueado\");\n    },\n    [fgRef]\n  );\n\n  function exportToPng(dom) {\n    console.log(dom, \"dom\");\n    //dom.scene().background = new THREE.Color(0xff0000);\n\n    var canvasf = dom.renderer();\n    canvasf.getClearColor();\n\n    console.log(canvasf, \"canvasf\");\n    var newA = canvasf.domElement;\n    console.log(newA, \"newA\");\n    Canvas2Image.saveAsPNG(newA, newA.width, newA.height);\n    //Canvas2Image.saveAsJPEG(canvasObj, width, height)\n    //Canvas2Image.saveAsGIF(canvasObj, width, height)\n    //Canvas2Image.saveAsBMP(canvasObj, width, height)\n\n    /*     var newC = canvasf.domElement.toDataURL(\"image/png\");\n    var img = new Image();\n    img.crossOrigin = \"anonymous\";\n    img.src = newC;\n    img.alt = \"from canvas\";\n    document.body.appendChild(img); */\n  }\n\n  function clearAlpha(dom) {\n    var canvasf = dom.renderer();\n\n    canvasf.setClearAlpha(0);\n  }\n\n  return (\n    <>\n      {Object.keys(graphData).length > 0 ? (\n        <>\n          <ForceGraph3D\n            ref={fgRef}\n            width={width}\n            graphData={graphData}\n            nodeLabel=\"id\"\n            nodeAutoColorBy=\"group\"\n            onNodeClick={handleClick}\n            rendererConfig={{ preserveDrawingBuffer: true, alpha: true }}\n            nodeRelSize=\"8\"\n            nodeResolution=\"12\"\n            linkOpacity=\"0.5\"\n            linkResolution=\"10\"\n            nodeThreeObject={(node) => {\n              const sprite = new SpriteText(node.id);\n              sprite.color = node.color;\n              sprite.textHeight = 8;\n              return sprite;\n            }}\n\n            //backgroundColor=\"grey\"\n          />\n\n          <button onClick={() => exportToPng(fgRef.current)}>Aqui</button>\n\n          <button onClick={() => clearAlpha(fgRef.current)}>clear</button>\n        </>\n      ) : null}\n    </>\n  );\n};\n","/home/julian/web_projects/react-sidebar-dropdown/front/src/utils/canvasSave.js",[],"/home/julian/web_projects/react-sidebar-dropdown/front/src/components/tresDGraph/FourDGraphFoc.js",["295","296","297","298","299","300","301"],"import React, {\n  useRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n  useMemo,\n} from \"react\";\nimport * as THREE from \"three\";\n//import domtoimage from \"dom-to-image\";\nimport Canvas2Image from \"../../utils/canvasSave\";\nimport SpriteText from \"three-spritetext\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport { useWindowSize } from \"@react-hook/window-size\";\n\nimport { NameContext } from \"../../App\";\nimport ColorGroup from \"../colorGroup/colorGroup\";\nimport SearchBar from \"../searchBar/searchBar\";\nimport Fuse from \"fuse.js\";\nimport ColorButton from \"../colorButton/colorButton\";\nimport { UnrealBloomPass } from \"three/examples/jsm/postprocessing/UnrealBloomPass\";\nimport Results from \"../results/results\";\n\n/* \nconst myData = {\n  nodes: [\n    {\n      id: \"id1\",\n      name: \"name1\",\n      color: \"green\",\n      val: 1,\n    },\n    {\n      id: \"id2\",\n      name: \"name2\",\n      color: \"blue\",\n      val: 10,\n    },\n  ],\n  links: [\n    {\n      source: \"id1\",\n      target: \"id2\",\n    },\n  ],\n}; */\n\nexport const FocusGraphDos = () => {\n  const { forNewNet } = useContext(NameContext);\n  /* console.log(forNetworkFiltered, \"forNetworkFilteredforNetworkFiltered\");\n  const [graphData, setGraphData] = useState({});\n  console.log(graphData, \"graphDataLoqueentraAlaGrafica\"); */\n  // const [layout, setLayout] = useState([]);\n  const [width, height] = useWindowSize();\n  console.log(forNewNet, \"forNewNet\");\n  const [forManipulation, setForManipulation] = useState({});\n  const fgRef = useRef();\n  const [colors, setColors] = useState([]);\n  const [labels, setLabels] = useState(false);\n  console.log(colors, \"colors\");\n  const [nColor, setNColor] = useState(\"green\");\n\n  const [nodeAmount, setNodeAmount] = useState(0.3);\n  const [textColor, setTextColor] = useState(\"rgb(1, 1, 20)\");\n  const [searchName, setSearchName] = useState(\"\");\n  console.log(searchName, \"searchName\");\n  console.log(nodeAmount, \"nodeAmount\");\n  const [busqueda, setBusqueda] = useState([\"\"]);\n  const [search, setSearch] = useState(4);\n  const [busqueda2, setBusqueda2] = useState([\"TF_ID\"]);\n  const [busqueda3, setBusqueda3] = useState([]);\n  console.log(busqueda3, \"busqueda3\");\n\n  const [autoresLista, setAutoresLista] = useState([]);\n  const [toglMult, setToglMult] = useState(false);\n  const [toglMult2, setToglMult2] = useState(false);\n  const [forTablesStaSortedFilt, setForTablesStaSortedFilt] = useState([]);\n  console.log(forTablesStaSortedFilt, \"forTablesStaSortedFilt\");\n  const [forTablesStaSorted, setForTablesStaSorted] = useState([]);\n  console.log(forTablesStaSorted, \"forTablesStaSorted\");\n  const [query, setQuery] = useState([]);\n  console.log(query, \"matches\");\n\n  const onChangeHandler = (event) => {\n    event.preventDefault();\n    let value = event.target.value.toLowerCase();\n\n    setSearchName(value);\n\n    /* const { target } = event;\n    const val = target.value.toLowerCase();\n    console.log(val, \"valHH\"); */\n    //setSearchName(val);\n  };\n\n  /*  const bloomPass = new UnrealBloomPass();\n  bloomPass.strength = 3;\n  bloomPass.radius = 1;\n  bloomPass.threshold = 0.1;\n  fgRef.current.postProcessingComposer().addPass(bloomPass); */\n\n  /*   useCallback(\n    (node) => {\n      const bloomPass = new UnrealBloomPass();\n      bloomPass.strength = 3;\n      bloomPass.radius = 1;\n      bloomPass.threshold = 0.1;\n      fgRef.current.postProcessingComposer().addPass(bloomPass);\n    },\n    [fgRef]\n  ); */\n\n  useEffect(() => {\n    ///\n    const options = {\n      includeScore: true,\n      // equivalent to `keys: [['author', 'tags', 'value']]`\n      keys: [\"nodes.label\"],\n    };\n\n    const fuse = new Fuse([forManipulation], options);\n\n    const matches = fuse.search(searchName);\n    console.log(matches, \"matchesIIII\");\n    setQuery(matches);\n  }, [forManipulation, searchName]);\n\n  useEffect(() => {\n    setForManipulation(forNewNet);\n\n    /*     if (Object.keys(forNewNet).length > 0) {\n      let nodNet = forNewNet.nodes.map((node) => {\n        return {\n          color: node.color,\n          group: node.groupQuery,\n        };\n      });\n      console.log(nodNet, \"nodeNet\");\n\n      const key = \"group\";\n\n      const arrayUniqueByKey = [\n        ...new Map(nodNet.map((item) => [item[key], item])).values(),\n      ];\n\n      setColors(arrayUniqueByKey);\n      setLabels(true);\n    } */\n  }, [forNewNet]);\n\n  /*   useEffect(() => {\n    if (labels === true) {\n      fgRef.current.refresh();\n    }\n  }, [labels, fgRef]); */\n  useEffect(() => {\n    console.log(forManipulation, \"forManipulationAqui\");\n    if (forManipulation.nodes !== undefined) {\n      let nodNet = forManipulation.nodes.map((node) => {\n        return {\n          color: node.color,\n          group: node.groupQuery,\n        };\n      });\n      console.log(nodNet, \"nodeNet\");\n\n      const key = \"group\";\n\n      const arrayUniqueByKey = [\n        ...new Map(nodNet.map((item) => [item[key], item])).values(),\n      ];\n      console.log(arrayUniqueByKey, \"arrayUniqueByKey\");\n      /// filter for stats\n\n      let forTables = arrayUniqueByKey.map((item) => {\n        let xg = forManipulation.nodes.filter(\n          (node) => node.groupQuery === item.group\n        );\n        console.log(xg, \"xg\");\n        return xg;\n      });\n      console.log(forTables, \"forTables\");\n\n      /// filter for table stats\n\n      /*       let forTablesSta = forTables.map((item) => {\n        //let fhg = item.filter((node) => node.groupBackground === \"Target_ID\");\n        let fhg = item.filter((node) =>\n          node.groupBackground.includes(\"Target_ID\")\n        );\n        return fhg;\n      });\n\n      console.log(forTablesSta, \"forTablesSta\");\n */\n      /// sorting forTablesSta homes.sort((a, b) => parseFloat(a.price) - parseFloat(b.price));\n\n      let forTablesStaSorted = forTables.map((item) => {\n        let fki = item.sort((a, b) => parseFloat(b.bce1) - parseFloat(a.bce1));\n        return fki;\n      });\n\n      setForTablesStaSorted(forTablesStaSorted);\n      console.log(forTablesStaSorted, \"forTablesStaSorted\");\n      ///\n      function count(string) {\n        var count = {};\n        string.forEach((s) => {\n          count[s] ? count[s]++ : (count[s] = 1);\n        });\n        return count;\n      }\n\n      let countsByG = count(\n        nodNet.map((item) => {\n          return item.group;\n        })\n      );\n\n      let nuevo = () => {\n        let nuevo = [];\n        for (let key in countsByG) {\n          nuevo.push({\n            group: key,\n            count: countsByG[key],\n            color: undefined,\n          });\n        }\n        return nuevo;\n      };\n\n      let aver = nuevo();\n\n      console.log(aver, \"aver\");\n\n      console.log(countsByG, \"countsByG\");\n\n      /* const map = new Map();\n      arrayUniqueByKey.forEach((item) => map.set(item.group, item));\n      countsByG.forEach((item) =>\n        map.set(Object.keys(item), { ...map.get(Object.keys(item)), ...item })\n      );\n      const mergedArr = Array.from(map.values());\n\n      console.log(mergedArr, \"mergedArr\"); */\n      /* \n      const resultr = arrayUniqueByKey.map((item) => {\n        const obj = countsByG.find((o) => Object.keys(o) === item.group);\n        return { ...item, ...obj };\n      });\n\n      console.log(resultr, \"resultr\"); */\n\n      function rainbow(numOfSteps, step) {\n        // This function generates vibrant, \"evenly spaced\" colours (i.e. no clustering). This is ideal for creating easily distinguishable vibrant markers in Google Maps and other apps.\n        // Adam Cole, 2011-Sept-14\n        // HSV to RBG adapted from: http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript\n        var r, g, b;\n        var h = step / numOfSteps;\n        var i = ~~(h * 6);\n        var f = h * 6 - i;\n        var q = 1 - f;\n        // eslint-disable-next-line default-case\n        switch (i % 6) {\n          case 0:\n            r = 1;\n            g = f;\n            b = 0;\n            break;\n          case 1:\n            r = q;\n            g = 1;\n            b = 0;\n            break;\n          case 2:\n            r = 0;\n            g = 1;\n            b = f;\n            break;\n          case 3:\n            r = 0;\n            g = q;\n            b = 1;\n            break;\n          case 4:\n            r = f;\n            g = 0;\n            b = 1;\n            break;\n          case 5:\n            r = 1;\n            g = 0;\n            b = q;\n            break;\n        }\n        var c =\n          \"#\" +\n          (\"00\" + (~~(r * 255)).toString(16)).slice(-2) +\n          (\"00\" + (~~(g * 255)).toString(16)).slice(-2) +\n          (\"00\" + (~~(b * 255)).toString(16)).slice(-2);\n        return c;\n      }\n\n      let newColors = aver.map((item, index) => {\n        return {\n          color: rainbow(aver.length, index),\n          group: item.group,\n          count: item.count,\n        };\n      });\n      console.log(newColors, \"newColors\");\n\n      setColors(newColors);\n\n      let autoresTmp = Object.keys(forManipulation.nodes[0].orgData.author);\n      let autores = autoresTmp.map((item, index) => {\n        return {\n          color: rainbow(autoresTmp.length, 11 + index),\n          id: index,\n          label: item,\n        };\n      });\n      setAutoresLista(autores);\n    }\n  }, [forManipulation]);\n\n  const handleClick = useCallback(\n    (node) => {\n      // Aim at node from outside it\n      const distance = 40;\n      const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n\n      fgRef.current.cameraPosition(\n        { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }, // new position\n        node, // lookAt ({ x, y, z })\n        3000 // ms transition duration\n      );\n    },\n    [fgRef]\n  );\n\n  const handleClickRigth = useCallback(\n    (node) => {\n      // Aim at node from outside it\n\n      console.log(node, \"object cliqueado\");\n      console.log(fgRef.current, \"fgRef.current\");\n      node.color = \"red\";\n      fgRef.current.refresh();\n    },\n    [fgRef]\n  );\n\n  const handleNodeColor = useCallback(\n    (node) => {\n      for (let i = 0; i < colors.length; i++) {\n        if (colors[i].group === node.groupQuery) {\n          return colors[i].color;\n        }\n      }\n\n      /*   if (node.groupQuery === colors[0].group) {\n        return (node.color = colors[0].color);\n      } else {\n        return (node.color = \"green\");\n      } */\n    },\n    [colors]\n  );\n\n  /*   const handleNodeColor = useCallback(\n    (node) => {\n      colors.map((color) => {\n        if (color.group === node.groupQuery) {\n          node.color = color.color;\n        }\n        return node.color;\n      });\n      fgRef.current.refresh();\n    },\n    [colors, fgRef]\n  ); */\n\n  /*   useEffect(() => {\n    const fg = fgRef.current;\n\n    fg.d3Force(\"link\").distance((link) => link.value);\n  }); */\n\n  /*   const handleSearchD = useCallback((node) => {\n    const options = {\n      includeScore: true,\n      // equivalent to `keys: [['author', 'tags', 'value']]`\n      keys: [\"nodes.label\"],\n    };\n\n    const fuse = new Fuse(node, options);\n\n    const matches = fuse.search(\"MYC\");\n\n    console.log(matches, \"matches2\");\n  }, []); */\n\n  function exportToPng(dom) {\n    console.log(dom, \"dom\");\n    //dom.scene().background = new THREE.Color(0xff0000);\n\n    var canvasf = dom.renderer();\n    canvasf.getClearColor();\n\n    console.log(canvasf, \"canvasf\");\n    var newA = canvasf.domElement;\n    console.log(newA, \"newA\");\n    Canvas2Image.saveAsPNG(newA, newA.width, newA.height);\n    //Canvas2Image.saveAsJPEG(canvasObj, width, height)\n    //Canvas2Image.saveAsGIF(canvasObj, width, height)\n    //Canvas2Image.saveAsBMP(canvasObj, width, height)\n\n    /*     var newC = canvasf.domElement.toDataURL(\"image/png\");\n    var img = new Image();\n    img.crossOrigin = \"anonymous\";\n    img.src = newC;\n    img.alt = \"from canvas\";\n    document.body.appendChild(img); */\n  }\n\n  function clearAlpha(dom) {\n    var canvasf = dom.renderer();\n\n    canvasf.setClearAlpha(0);\n  }\n\n  //useEffect(() => {}, [fgRef]);\n\n  const glowTry = useCallback(\n    (node) => {\n      const bloomPass = new UnrealBloomPass(node);\n      bloomPass.strength = 0.2;\n      bloomPass.radius = 1;\n      bloomPass.threshold = 0.1;\n      fgRef.current.postProcessingComposer().addPass(bloomPass);\n      //fgRef.current.postProcessingComposer().removePass(bloomPass);\n      console.log(fgRef.current, \"fgRef.current\");\n    },\n    [fgRef]\n  );\n\n  const spriText = useCallback(\n    (node) => {\n      const sprite = new SpriteText(node.id);\n      sprite.color = \"rgba(187, 35, 100, 1)\"; //{ textColor }; //node.color;\n      sprite.textHeight = node.node_size1 / 500;\n      fgRef.current.refresh();\n      return sprite;\n    },\n    [fgRef]\n  );\n\n  /*   let getNodeEsp = useCallback(\n    (node) => {\n      for (let i = 0; i < busqueda.length; i++) {\n        if (busqueda[i] === node.id) {\n          return \"black\";\n        }\n      }\n    },\n    [busqueda]\n  ); */\n\n  const getNodeEsp = useCallback(\n    (node) => {\n      for (let i = 0; i < busqueda.length; i++) {\n        if (busqueda[i] === node.id.toLowerCase()) {\n          return \"orange\";\n        }\n      }\n    },\n    [busqueda]\n  );\n\n  const getNodesByList = useCallback(\n    (node) => {\n      for (let i = 0; i < busqueda2.length; i++) {\n        if (node.orgData.author[busqueda2[i].label] === 1) {\n          return busqueda2[i].color;\n        }\n      }\n    },\n    [busqueda2]\n  );\n\n  const getNodesByList2 = (autor) => {\n    console.log(autor, \"autorAqui\");\n    let forTablesSta = forManipulation.nodes.filter(\n      (node) =>\n        node.groupBackground.includes(autor.label) &&\n        node.groupQuery === colors[1].group /// dos filtros\n    );\n    console.log(forTablesSta, \"forTablesStaAqui\");\n\n    let forTablesStaSorted = forTablesSta.sort(\n      (a, b) => parseFloat(b.bce1) - parseFloat(a.bce1)\n    );\n\n    setForTablesStaSortedFilt(forTablesStaSorted);\n  };\n\n  /*   const sequencialFilter = useCallback(\n    (node) => {\n      for (let i = 0; i < busqueda3.length; i++) {\n        if (node.orgData.author[busqueda3[i].label] === 1) {\n          return busqueda3[i].color;\n        }\n      }\n    },\n    [busqueda3]\n  ); */\n\n  /*   const sequencialFilter = useCallback(\n    (node) => {\n      for (let i = 0; i < colors.length; i++) {\n        if (colors[i].group === node.groupQuery) {\n          return colors[i].color;\n        }\n        for (let i = 0; i < busqueda3.length; i++) {\n          if (node.orgData.author[busqueda3[i].label] === 1) {\n            console.log(\"aqui\");\n            return busqueda3[i].color;\n          }\n        }\n      }\n    },\n\n    [colors, busqueda3]\n  ); */\n\n  const sequencialFilter = useCallback(\n    (node) => {\n      /// color inicial\n      for (let i = 0; i < colors.length; i++) {\n        if (colors[i].group === node.groupQuery) {\n          return colors[i].color;\n        }\n        /// color sequencial\n        for (let i = 0; i < busqueda3.length; i++) {\n          if (node.orgData.author[busqueda3[i].label] === 1) {\n            console.log(\"aqui\");\n            //return busqueda3[i].color;\n            //return busqueda3[i].color;\n            return \"orange\";\n          }\n        }\n      }\n    },\n\n    [colors, busqueda3]\n  );\n\n  /*   const handleClickNode = () => {\n    setSearch(!search);\n  }; */\n\n  const handleClickNode = () => {\n    setSearch(1);\n  };\n\n  const handleClickNode2 = () => {\n    setSearch(4);\n\n    setToglMult(false);\n  };\n\n  const handleClickNode3List = (autor) => {\n    setBusqueda2([autor]);\n    getNodesByList2(autor);\n    console.log(\"object\", autor);\n  };\n\n  const handleClickNode4List = (autor) => {\n    //setMyArray(oldArray => [...oldArray, newElement]);\n    //setBusqueda3((busqueda3) => [...busqueda3, autor]);//sequencial\n    setBusqueda3([autor]);\n    console.log(\"object\", autor);\n  };\n\n  const handleClickNode3 = () => {\n    setSearch(3);\n    setToglMult(!toglMult);\n  };\n\n  // sequencial filter\n  const handleClickNode4 = () => {\n    setSearch(5);\n\n    setBusqueda3([]);\n\n    setToglMult2(!toglMult2);\n  };\n\n  const handleSearch = (event) => {\n    let value = event.target.value.toLowerCase().replace(/\\s/g, \"\").split(\",\");\n    setBusqueda(value);\n  };\n\n  /* \n  const getPrunedTree = useCallback(() => {\n    if (forManipulation.nodes !== undefined) {\n      const visibleNodes = [];\n      const visibleLinks = [];\n      const traverseTree = (node) => {\n        visibleNodes.push(node);\n        if (node.collapsed) return;\n        visibleLinks.push(...node.childLinks);\n        node.childLinks\n          .map((link) =>\n            typeof link.target === \"object\"\n              ? link.target\n              : nodesById[link.target]\n          ) // get child node\n          .forEach(traverseTree);\n      };\n      console.log(hiddenClusters);\n      forManipulation.nodes\n        .filter(\n          (node) => node.isClusterNode && !hiddenClusters.includes(node.id)\n        )\n        .forEach((node) => traverseTree(node));\n\n      return { nodes: visibleNodes, links: visibleLinks };\n    }\n  }, [nodesById, hiddenClusters]);\n\n  const [prunedTree, setPrunedTree] = useState(getPrunedTree());\n\n  const handleNodeClick = useCallback(\n    (node) => {\n      node.collapsed = !node.collapsed; // toggle collapse state\n      setPrunedTree(getPrunedTree());\n    },\n    [getPrunedTree]\n  );\n\n  useEffect(() => {\n    setPrunedTree(getPrunedTree());\n  }, [hiddenClusters, getPrunedTree]);\n */\n\n  let change = () => {\n    if (search === 4) {\n      return handleNodeColor;\n    }\n    if (search === 3) {\n      return getNodesByList;\n    }\n    if (search === 1) {\n      return getNodeEsp;\n    }\n    if (search === 5) {\n      return sequencialFilter;\n    }\n  };\n  return (\n    <>\n      <div\n        style={{\n          width: \"100%\",\n          display: \"flex\",\n          height: \"95vh\",\n          position: \"relative\",\n        }}\n      >\n        {Object.keys(forManipulation).length > 0 ? (\n          <div>\n            <ForceGraph3D\n              ref={fgRef}\n              width={width}\n              height={height}\n              graphData={forManipulation}\n              nodeLabel=\"id\"\n              nodeAutoColorBy=\"group\" //numero\n              onNodeClick={handleClick}\n              onNodeRightClick={handleClickRigth}\n              rendererConfig={{ preserveDrawingBuffer: true, alpha: true }}\n              nodeRelSize=\"8\"\n              nodeResolution=\"12\"\n              linkOpacity=\"0.5\"\n              linkResolution=\"10\"\n              nodeOpacity={nodeAmount}\n              //nodeColor={(node) => (node.id === \"HSP101\" ? \"orange\" : \"white\")}\n              //nodeColor={handleNodeColor}\n              //nodeColor={search ? getNodeEsp : handleNodeColor}\n              nodeColor={change()}\n              nodeVal={(node) => node.node_size1 / 800}\n              //nodeColor=\"#ff0000\"\n              //nodeColor={(node) => console.log(node.node_colorA)}\n              nodeThreeObject={spriText}\n              nodeThreeObjectExtend={true}\n              /*    nodeColor={(node) => {\n              return node.color; ///\"rgba(17, 235, 100, 0.8)\";\n            }} */\n              backgroundColor={textColor}\n              onNodeDragEnd={(node) => {\n                //console.log(node.fx);\n                node.fx = node.x;\n                node.fy = node.y;\n                node.fz = node.z;\n              }}\n            />\n            <div\n              style={{\n                display: \"flex\",\n                position: \"absolute\",\n                bottom: \"-40px\",\n                left: \"0px\",\n              }}\n            >\n              <button onClick={() => exportToPng(fgRef.current)}>Aqui</button>\n\n              <button onClick={() => clearAlpha(fgRef.current)}>clear</button>\n            </div>\n\n            <div\n              style={{\n                border: \"1px solid white\",\n                position: \"absolute\",\n                top: \"0\",\n                left: \"0\",\n                margin: \"5px\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <input\n                type=\"text\"\n                value={nodeAmount}\n                onChange={(e) => setNodeAmount(e.target.value)}\n              />\n              <input\n                type=\"text\"\n                value={textColor}\n                onChange={(e) => setTextColor(e.target.value)}\n              />\n              <input\n                type=\"text\"\n                value={searchName}\n                onChange={onChangeHandler}\n              />\n              <SearchBar placeholder=\"Search\" onChange={handleSearch} />\n              <button onClick={handleClickNode}>Modo search</button>\n              <br />\n              <button onClick={handleClickNode2}>Default</button>\n              <br />\n              <button onClick={handleClickNode3}>Algoen3</button>\n              {toglMult ? (\n                <>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      justifyContent: \"space-between\",\n                      width: \"fit-content\",\n                    }}\n                  >\n                    {autoresLista.map((autor) => {\n                      return (\n                        <div\n                          style={{\n                            display: \"flex\",\n                            marginTop: \"5px\",\n                            justifyContent: \"space-between\",\n                          }}\n                        >\n                          <button\n                            style={{ marginRight: \"10px\", width: \"100%\" }}\n                            key={autor.id}\n                            onClick={() => handleClickNode3List(autor)}\n                          >\n                            {autor.label}\n                          </button>\n                          <div\n                            style={{\n                              backgroundColor: autor.color,\n                              width: \"50px\",\n                              height: \"15\",\n                              display: \"flex\",\n                              justifyContent: \"flex-end\",\n                            }}\n                          ></div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </>\n              ) : null}\n\n              <br />\n              <button onClick={handleClickNode4}>ProgresiveFilt</button>\n              {toglMult2 ? (\n                <>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      justifyContent: \"space-between\",\n                      width: \"fit-content\",\n                    }}\n                  >\n                    {autoresLista.map((autor) => {\n                      return (\n                        <ColorButton\n                          autor={autor}\n                          handleClickNodeFunction={handleClickNode4List}\n                        />\n                      );\n\n                      /* return (\n                        <div\n                          style={{\n                            display: \"flex\",\n                            marginTop: \"5px\",\n                            justifyContent: \"space-between\",\n                          }}\n                        >\n                          <button\n                            style={{ marginRight: \"10px\", width: \"100%\" }}\n                            key={autor.id}\n                            onClick={() => handleClickNode4List(autor)}\n                          >\n                            {autor.label}\n                          </button>\n                          <div\n                            style={{\n                              backgroundColor: autor.color,\n                              width: \"50px\",\n                              height: \"15\",\n                              display: \"flex\",\n                              justifyContent: \"flex-end\",\n                            }}\n                          ></div>\n                        </div>\n                      ); */\n                    })}\n                  </div>\n                </>\n              ) : null}\n            </div>\n\n            <div\n              style={{\n                width: \"max-content\",\n                height: \"fit-content\",\n                border: \"1px solid white\",\n                position: \"absolute\",\n                top: \"0\",\n                right: \"0\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                paddingBottom: \"5px\",\n                paddingRight: \"10px\",\n                margin: \"5px\",\n              }}\n            >\n              {colors.length > 0\n                ? colors.map((elem) => {\n                    return (\n                      <ColorGroup\n                        key={elem.group}\n                        count={elem.count}\n                        color={elem.color}\n                        group={elem.group}\n                      />\n                    );\n                  })\n                : null}\n              {/* <ColorGroup group={\"grupo1\"} color={\"red\"} />\n              <ColorGroup group={\"grupo2\"} color={\"blue\"} /> */}\n            </div>\n          </div>\n        ) : null}\n      </div>\n      <Results resultsGeneral={forTablesStaSorted} />\n    </>\n  );\n};\n","/home/julian/web_projects/react-sidebar-dropdown/front/src/components/colorGroup/colorGroup.js",[],"/home/julian/web_projects/react-sidebar-dropdown/front/src/components/searchBar/searchBar.js",[],"/home/julian/web_projects/react-sidebar-dropdown/front/src/components/results/results.js",["302","303"],"import React from \"react\";\nimport styled from \"styled-components\";\nimport RowTable from \"../newTableJul/rowTable\";\nimport ComponentTableDos from \"../tablaJulComp/componentTableDos\";\n\nconst ListSectionCont = styled.div`\n  width: 100%;\n  height: fit-content;\n  display: flex;\n  flex-direction: column;\n  background-color: rgb(232, 234, 238);\n  font-size: 3rem;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst ListSection = styled.div`\n  width: 90%;\n  height: fit-content;\n  border: 1px solid green;\n  background-color: rgb(215, 235, 200);\n  display: flex;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  padding: 20px;\n  border-radius: 3px;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n\n    //width: 100%;\n  }\n`;\n\nconst CardCont = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  width: 28vw;\n  min-width: fit-content;\n  height: fit-content;\n  border: 1px solid black;\n  font-size: 1.2rem;\n  margin-bottom: 10px;\n  background-color: #e5ce9c;\n  padding: 5px;\n  padding-right: 20px;\n  margin-right: 10px;\n  border-radius: 3px;\n  @media (max-width: 768px) {\n    width: 100%;\n    //flex-basis: 70%;\n  }\n`;\n\nconst ListUpTitle = styled.div`\n  width: 90%;\n  font-size: 2rem;\n  height: fit-content;\n  margin-bottom: 20px;\n  border-radius: 3px;\n  margin-top: 2vh;\n`;\n\nconst TableTot = styled.div`\n  width: 100%;\n  border: 1px solid black;\n`;\n\nconst Results = ({ resultsGeneral }) => {\n  let tableSchema = [\n    { name: \"Gene\", mapper: \"genes\", id: 1 },\n    { name: \"AGI\", mapper: \"name2\", id: 2 },\n    { name: \"BCA\", mapper: \"bce1\", id: 3 },\n    { name: \"ATT\", mapper: \"bet_c3\", id: 4 },\n    { name: \"CC\", mapper: \"c_c2\", id: 5 },\n    { name: \"FF\", mapper: \"ei_c5\", id: 6 },\n  ];\n\n  const tableSchemaDos = {\n    genes: \"Gene\",\n    name2: \"AGI\",\n    bce1: \"BCA\",\n    bet_c3: \"ATT\",\n    c_c2: \"CC\",\n    ei_c5: \"FF\",\n  };\n\n  // const r = array.filter((elem) => !anotherArray.find(({ id }) => elem.id === id) && elem.sub);\n  //result = people.filter((o) => id_filter.includes(+o.id) && o.gender == \"m\");\n\n  /*  let tableTot = resultsGeneral.map((element, index) => {\n    return element.filter((elem) =>\n      tableSchema.find((obj) => obj.mapper === Object.values(elem))\n    );\n  }); */\n\n  let filterOb = (objQ, arrQ) => {\n    const filtered = Object.keys(objQ)\n      .filter((key) => arrQ.includes(key))\n      .reduce((obj, key) => {\n        obj[key] = objQ[key];\n        return obj;\n      }, {});\n    return filtered;\n  };\n\n  let scje = tableSchema.map((elem) => elem.mapper);\n\n  /* let aver = resultsGeneral[0].map((anim) => filterOb(anim, scje));\n  console.log(aver); */\n\n  let filteredCard = resultsGeneral.map((element, index) => {\n    return element.map((elem) => filterOb(elem, scje)).slice(0, 5);\n  });\n\n  console.log(filteredCard);\n\n  //let hji = pick(scje)(resultsGeneral[0][0]);\n  //console.log(hji);\n  ///result = people.filter((o) => id_filter.includes(+o.id) && o.gender == \"m\");\n\n  return (\n    <ListSectionCont>\n      <div style={{ height: \"10vh\" }}></div>\n      <ListUpTitle>Network Centrality Measures by Group</ListUpTitle>\n      <ListSection>\n        {filteredCard.map((result, index) => {\n          return (\n            <CardCont key={index}>\n              <h3>Group: {result[0].groupQuery}</h3>\n              <p>Nodes: {result.length}</p>\n              /\n              <ComponentTableDos nData={result} names={tableSchemaDos} />\n              {/*  <TableTot>\n                <RowTable cols={tableSchema} res={result} />\n              </TableTot> */}\n            </CardCont>\n          );\n        })}\n      </ListSection>\n    </ListSectionCont>\n  );\n};\n\nexport default Results;\n","/home/julian/web_projects/araneta/front/src/index.js",[],"/home/julian/web_projects/araneta/front/src/App.js",[],"/home/julian/web_projects/araneta/front/src/components/Sidebar.js",[],"/home/julian/web_projects/araneta/front/src/pages/Overview.js",[],"/home/julian/web_projects/araneta/front/src/pages/Team.js",[],"/home/julian/web_projects/araneta/front/src/pages/Reports.js",[],"/home/julian/web_projects/araneta/front/src/components/SidebarData.js",["304"],"/home/julian/web_projects/araneta/front/src/components/SubMenu.js",[],"/home/julian/web_projects/araneta/front/src/components/chartbasic/chartbasic.js",[],"/home/julian/web_projects/araneta/front/src/components/fileupload/FileUpload.js",[],"/home/julian/web_projects/araneta/front/src/components/scatterbasic/scatter.js",[],"/home/julian/web_projects/araneta/front/src/components/heatmapMio/mainHeat.js",["305"],"/home/julian/web_projects/araneta/front/src/components/filterDod/filterDos.js",[],"/home/julian/web_projects/araneta/front/src/forstudy/tres.js",[],"/home/julian/web_projects/araneta/front/src/components/cardInter/cardIntersection.js",[],"/home/julian/web_projects/araneta/front/src/components/fileupload/fileUploadStyles.js",[],"/home/julian/web_projects/araneta/front/src/components/filterDod/button.js",[],"/home/julian/web_projects/araneta/front/src/components/smallSquareCo/smallSquareCo.js",[],"/home/julian/web_projects/araneta/front/src/components/upset/upset.js",[],["306","307"],"/home/julian/web_projects/araneta/front/src/components/tresDGraph/TresDGraph.js",["308"],"/home/julian/web_projects/araneta/front/src/components/tresDGraph/FourDGraphFoc.js",["309","310"],"/home/julian/web_projects/araneta/front/src/components/tresDGraph/TresDGraphFoc.js",["311","312"],"/home/julian/web_projects/araneta/front/src/utils/canvasSave.js",[],"/home/julian/web_projects/araneta/front/src/components/colorGroup/colorGroup.js",[],"/home/julian/web_projects/araneta/front/src/components/searchBar/searchBar.js",[],"/home/julian/web_projects/araneta/front/src/components/results/results.js",["313","314"],"/home/julian/web_projects/araneta/front/src/components/colorButton/colorButton.js",[],"/home/julian/web_projects/araneta/front/src/components/newTableJul/rowTable.js",["315"],"/home/julian/web_projects/araneta/front/src/components/tablaJulComp/componentTableDos.js",["316","317"],"/home/julian/web_projects/araneta/front/src/components/newTableJul/rowCols.js",[],"/home/julian/web_projects/araneta/front/src/components/listUploadComponent/listUploadComp.js",[],"/home/julian/web_projects/araneta/front/src/components/fileupload/FileUploadNum.js",[],"/home/julian/web_projects/araneta/front/src/components/corrNodesBu/corrNodesBu.js",["318"],"import React, { useContext, useState } from \"react\";\nimport { NameContext } from \"../../App\";\n\nconst CorrNodesBu = () => {\n  const { corrNodes } = useContext(NameContext);\n  let searchLinks = (algo) => {\n    console.log(algo, \"algo\");\n  };\n  return (\n    <>\n      {Object.keys(corrNodes).length > 0 ? (\n        <>\n          {Object.keys(corrNodes).map((key, index) => {\n            return (\n              <>\n                <button key={index} onClick={() => searchLinks(key)}>\n                  {key}\n                </button>\n              </>\n            );\n          })}\n        </>\n      ) : null}\n    </>\n  );\n};\n\nexport default CorrNodesBu;\n",{"ruleId":"319","replacedBy":"320"},{"ruleId":"321","replacedBy":"322"},{"ruleId":"323","severity":1,"message":"324","line":123,"column":8,"nodeType":"325","endLine":123,"endColumn":10,"suggestions":"326"},{"ruleId":"319","replacedBy":"327"},{"ruleId":"321","replacedBy":"328"},{"ruleId":"329","severity":1,"message":"330","line":5,"column":11,"nodeType":"331","messageId":"332","endLine":5,"endColumn":37},{"ruleId":"329","severity":1,"message":"333","line":9,"column":19,"nodeType":"331","messageId":"332","endLine":9,"endColumn":29},{"ruleId":"319","replacedBy":"334"},{"ruleId":"321","replacedBy":"335"},{"ruleId":"329","severity":1,"message":"336","line":17,"column":17,"nodeType":"331","messageId":"332","endLine":17,"endColumn":24},{"ruleId":"329","severity":1,"message":"337","line":18,"column":18,"nodeType":"331","messageId":"332","endLine":18,"endColumn":27},{"ruleId":"329","severity":1,"message":"338","line":73,"column":9,"nodeType":"331","messageId":"332","endLine":73,"endColumn":15},{"ruleId":"319","replacedBy":"339"},{"ruleId":"321","replacedBy":"340"},{"ruleId":"329","severity":1,"message":"341","line":9,"column":10,"nodeType":"331","messageId":"332","endLine":9,"endColumn":20},{"ruleId":"329","severity":1,"message":"342","line":8,"column":13,"nodeType":"331","messageId":"332","endLine":8,"endColumn":18},{"ruleId":"329","severity":1,"message":"343","line":46,"column":17,"nodeType":"331","messageId":"332","endLine":46,"endColumn":23},{"ruleId":"329","severity":1,"message":"344","line":7,"column":3,"nodeType":"331","messageId":"332","endLine":7,"endColumn":10},{"ruleId":"329","severity":1,"message":"342","line":9,"column":13,"nodeType":"331","messageId":"332","endLine":9,"endColumn":18},{"ruleId":"329","severity":1,"message":"345","line":59,"column":10,"nodeType":"331","messageId":"332","endLine":59,"endColumn":16},{"ruleId":"329","severity":1,"message":"346","line":59,"column":18,"nodeType":"331","messageId":"332","endLine":59,"endColumn":27},{"ruleId":"329","severity":1,"message":"347","line":61,"column":10,"nodeType":"331","messageId":"332","endLine":61,"endColumn":16},{"ruleId":"329","severity":1,"message":"348","line":61,"column":18,"nodeType":"331","messageId":"332","endLine":61,"endColumn":27},{"ruleId":"329","severity":1,"message":"349","line":435,"column":9,"nodeType":"331","messageId":"332","endLine":435,"endColumn":16},{"ruleId":"329","severity":1,"message":"350","line":3,"column":8,"nodeType":"331","messageId":"332","endLine":3,"endColumn":16},{"ruleId":"329","severity":1,"message":"351","line":65,"column":7,"nodeType":"331","messageId":"332","endLine":65,"endColumn":15},{"ruleId":"329","severity":1,"message":"352","line":2,"column":13,"nodeType":"331","messageId":"332","endLine":2,"endColumn":20},{"ruleId":"329","severity":1,"message":"353","line":263,"column":25,"nodeType":"331","messageId":"332","endLine":263,"endColumn":30},{"ruleId":"319","replacedBy":"354"},{"ruleId":"321","replacedBy":"355"},{"ruleId":"329","severity":1,"message":"341","line":9,"column":10,"nodeType":"331","messageId":"332","endLine":9,"endColumn":20},{"ruleId":"329","severity":1,"message":"356","line":78,"column":10,"nodeType":"331","messageId":"332","endLine":78,"endColumn":32},{"ruleId":"329","severity":1,"message":"357","line":82,"column":10,"nodeType":"331","messageId":"332","endLine":82,"endColumn":15},{"ruleId":"329","severity":1,"message":"342","line":8,"column":13,"nodeType":"331","messageId":"332","endLine":8,"endColumn":18},{"ruleId":"329","severity":1,"message":"343","line":46,"column":17,"nodeType":"331","messageId":"332","endLine":46,"endColumn":23},{"ruleId":"329","severity":1,"message":"350","line":3,"column":8,"nodeType":"331","messageId":"332","endLine":3,"endColumn":16},{"ruleId":"329","severity":1,"message":"351","line":72,"column":7,"nodeType":"331","messageId":"332","endLine":72,"endColumn":15},{"ruleId":"329","severity":1,"message":"358","line":9,"column":7,"nodeType":"331","messageId":"332","endLine":9,"endColumn":13},{"ruleId":"329","severity":1,"message":"359","line":1,"column":17,"nodeType":"331","messageId":"332","endLine":1,"endColumn":25},{"ruleId":"329","severity":1,"message":"360","line":4,"column":7,"nodeType":"331","messageId":"332","endLine":4,"endColumn":12},{"ruleId":"329","severity":1,"message":"359","line":1,"column":29,"nodeType":"331","messageId":"332","endLine":1,"endColumn":37},"no-native-reassign",["361"],"no-negated-in-lhs",["362"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["363"],["361"],["362"],"no-unused-vars","'setDataToProviderFilteredR' is assigned a value but never used.","Identifier","unusedVar","'setMergedL' is assigned a value but never used.",["361"],["362"],"'setWith' is assigned a value but never used.","'setHeight' is assigned a value but never used.","'layout' is assigned a value but never used.",["361"],["362"],"'FocusGraph' is defined but never used.","'THREE' is defined but never used.","'height' is assigned a value but never used.","'useMemo' is defined but never used.","'labels' is assigned a value but never used.","'setLabels' is assigned a value but never used.","'nColor' is assigned a value but never used.","'setNColor' is assigned a value but never used.","'glowTry' is assigned a value but never used.","'RowTable' is defined but never used.","'TableTot' is assigned a value but never used.","'FaIcons' is defined but never used.","'vfRgt' is assigned a value but never used.",["361"],["362"],"'forTablesStaSortedFilt' is assigned a value but never used.","'query' is assigned a value but never used.","'celCol' is assigned a value but never used.","'useState' is defined but never used.","'names' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"364","fix":"365"},"Update the dependencies array to be: [history]",{"range":"366","text":"367"},[3395,3397],"[history]"]